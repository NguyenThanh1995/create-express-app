#!/usr/bin/env node

const request = require("request");

const download = require("download-git-repo");
const program = require("commander");
const exists = require("fs").existsSync;
const path = require("path");
const ora = require("ora");
const home = require("user-home");
const tildify = require("tildify");
const chalk = require("chalk");
const inquirer = require("inquirer");
const rm = require("rimraf").sync;
const logger = require("../lib/logger");
const generate = require("../lib/generate");
const localPath = require("../lib/local-path");

const isLocalPath = localPath.isLocalPath;
const getTemplatePath = localPath.getTemplatePath;

program

  .option("-c, --clone", "use git clone")
  .option("--offline", "use cached template")
  .version(require("../package").version);

program.parse(process.argv);

let template = program.args?.[0];

if (!template) {
  const spinner = ora("getting list templates from github...");
  spinner.start();

  request(
    {
      url: "https://api.github.com/users/express-templates/repos",
      headers: {
        "User-Agent": "shin-templates",
      },
    },
    async (err, _res, body) => {
      if (err) logger.fatal(err);
      const requestBody = JSON.parse(body);
      spinner.stop();
      const listTemplates = requestBody.map((repo) => {
        return {
          name:
            "  " +
            chalk.yellow("â˜…") +
            "  " +
            chalk.blue(repo.name) +
            " - " +
            (repo.description || ""),
          value: repo.name,
        };
      });

      template = await inquirer
        .prompt([
          {
            type: "list",
            name: "tpl",
            message: "Select template to start project:",
            choices: listTemplates,
            prefix: "express-templates/",
          },
        ])
        .then(({ tpl }) => tpl);

      init();
    }
  );
} else {
  init();
}

async function init() {
  const hasSlash = template?.indexOf("/") > -1;
  let rawName = program.args[1];

  if (!rawName) {
    rawName = await inquirer
      .prompt([
        {
          type: "string",
          name: "rawName",
          validate(val) {
            return !!val;
          },
          message: "Folder name containing the project (create if don't exists):",
        },
      ])
      .then(({ rawName }) => rawName);
  }

  const inPlace = !rawName || rawName === ".";
  const name = inPlace ? process.cwd() : rawName;
  const to = path.resolve(rawName || ".");
  const clone = program.clone || false;

  const tmp = path.join(
    home,
    ".express-templates",
    template.replace(/[\/:]/g, "-")
  );
  if (program.offline) {
    console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`);
    template = tmp;
  }

  console.log();
  process.on("exit", () => {
    console.log();
  });

  if (inPlace || exists(to)) {
    inquirer
      .prompt([
        {
          type: "confirm",
          message: inPlace
            ? "Generate project in current directory?"
            : "Target directory exists. Continue?",
          name: "ok",
        },
      ])
      .then((answers) => {
        if (answers.ok) {
          run();
        }
      })
      .catch(logger.fatal);
  } else {
    run();
  }

  function run() {
    // check if template is local
    if (isLocalPath(template)) {
      const templatePath = getTemplatePath(template);
      if (exists(templatePath)) {
        generate(name, templatePath, to, (err) => {
          if (err) logger.fatal(err);
          console.log();
          logger.success('Generated "%s".', name);
        });
      } else {
        logger.fatal('Local template "%s" not found.', template);
      }
    } else {
      if (!hasSlash) {
        // use official templates
        const officialTemplate = "express-templates/" + template;
        if (template.indexOf("#") !== -1) {
          downloadAndGenerate(officialTemplate);
        } else {
          if (template.indexOf("-2.0") !== -1) {
            return;
          }

          // warnings.v2BranchIsNowDefault(template, inPlace ? '' : name)
          downloadAndGenerate(officialTemplate);
        }
      } else {
        downloadAndGenerate(template);
      }
    }
  }

  /**
   * Download a generate from a template repo.
   *
   * @param {String} template
   */

  function downloadAndGenerate(template) {
    const spinner = ora("downloading template");
    spinner.start();
    // Remove if local template exists
    if (exists(tmp)) rm(tmp);
    download(template, tmp, { clone }, (err) => {
      spinner.stop();
      if (err)
        logger.fatal(
          "Failed to download repo " + template + ": " + err.message.trim()
        );
      generate(name, tmp, to, (err) => {
        if (err) logger.fatal(err);
        console.log();
        logger.success('Generated "%s".', name);
      });
    });
  }
}
